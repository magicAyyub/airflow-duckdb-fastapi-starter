services:
  postgres:
    image: postgres:14
    environment:
      POSTGRES_USER: myuser
      POSTGRES_PASSWORD: mypassword
    ports:
      - "5432:5432"
    volumes:
      - ./postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U myuser"]
      interval: 5s
      retries: 5

  airflow-webserver:
    build: ./airflow
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      AIRFLOW__CORE__EXECUTOR: LocalExecutor
      AIRFLOW__CORE__SQL_ALCHEMY_CONN: postgresql+psycopg2://myuser:mypassword@postgres:5432/airflow
      AIRFLOW__CORE__LOAD_EXAMPLES: "false"
      PGHOST: postgres
      PGPORT: 5432
      PGUSER: myuser
      PGPASSWORD: mypassword
      PGDATABASE: metrics
    volumes:
      - ./airflow/dags:/opt/airflow/dags
      - ./airflow/etl:/opt/airflow/etl
      - olap_data_volume:/opt/airflow
    command: >
      bash -c "
        airflow db init &&
        airflow users create --username admin --password admin --firstname Admin --lastname User --role Admin --email admin@example.com &&
        airflow webserver
      "
    ports:
      - "8080:8080"

  airflow-scheduler:
    build: ./airflow
    depends_on:
      postgres:
        condition: service_healthy
      airflow-webserver:
        condition: service_started
    environment:
      AIRFLOW__CORE__EXECUTOR: LocalExecutor
      AIRFLOW__CORE__SQL_ALCHEMY_CONN: postgresql+psycopg2://myuser:mypassword@postgres:5432/airflow
      # Désactiver la protection CSRF pour le développement
      AIRFLOW__WEBSERVER__WTF_CSRF_ENABLED: "false"
      PGHOST: postgres
      PGPORT: 5432
      PGUSER: myuser
      PGPASSWORD: mypassword
      PGDATABASE: metrics
    volumes:
      - ./airflow/dags:/opt/airflow/dags
      - ./airflow/etl:/opt/airflow/etl
      - olap_data_volume:/opt/airflow
    command: airflow scheduler

  fastapi:
    build: ./fastapi_app
    ports:
      - "8000:8000"
    volumes:
      - olap_data_volume:/opt/airflow  # Pour accéder à olap.duckdb 
    depends_on:
      - airflow-webserver
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - backend_network
      - public_network

  frontend:
    build: ./frontend
    ports:
      - "3000:3000"
    depends_on:
      fastapi:
        condition: service_healthy
    networks:
      - backend_network
      - public_network

volumes:
  postgres_data:
  airflow_data:
  olap_data_volume:

networks:
  backend_network:
    driver: bridge
    internal: true # Réseau privé
  public_network:
    driver: bridge